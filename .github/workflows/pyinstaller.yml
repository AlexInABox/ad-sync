name: Package Application with Pyinstaller

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - name: Package Application
      uses: JackMcKew/pyinstaller-action-windows@main
      with:
        path: src

    - name: Copy artifact to root
      run: |
        cp -fr src/dist/windows/main.exe main.exe
        sudo rm -rf src/dist

    - name: Commit and push artifact
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Commit compiled artifact

    - name: Get latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "none")
        echo "::set-output name=LATEST_TAG::$latest_tag"
    
    - name: Increment tag
      id: increment_tag
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        echo "Latest tag: $latest_tag"
        if [ "$latest_tag" = "none" ]; then
          new_tag="v0.0.1"
        else
          IFS='.' read -r -a tag_parts <<< "${latest_tag//v/}"
          major=${tag_parts[0]}
          minor=${tag_parts[1]}
          patch=${tag_parts[2]}
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"
        fi
        echo "New tag: $new_tag"
        echo "::set-output name=NEW_TAG::$new_tag"

    - name: Create new tag

      run: |
        new_tag=${{ steps.increment_tag.outputs.NEW_TAG }}
        git tag $new_tag
        git push origin $new_tag

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.increment_tag.outputs.NEW_TAG }}
        files: main.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}